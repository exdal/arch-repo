pkgname=llvm
pkgver=18.1.7
pkgdesc="Full LLVM environment for xmake"
arch=("x86_64")
url="https://llvm.org/"
license=("custom:Apache 2.0 with LLVM Exception")

provides=(
  "llvm" "llvm=${pkgver}" "llvm-libs" "clang" "clang=${pkgver}"
  "clang-analyzer" "clang-tools-extra" "polly" "compiler-rt"
  "lld" "lldb" "libc++" "libc++abi" "libc++experimental")

replaces=("llvm" "llvm-libs" "clang" "clang-analyzer"
  "clang-tools-extra" "polly" "compiler-rt" "lld" "lldb"
  "libc++" "libc++abi" "libc++experimental")

conflicts=("llvm" "llvm-libs" "clang" "clang-analyzer"
  "clang-tools-extra" "polly" "compiler-rt" "lld" "lldb"
  "llvm-git" "llvm-libs-git" "libc++"
  "libc++abi" "libc++experimental")

depends=("libelf" "libffi" "libedit" "libxml2" "ncurses")

makedepends=(
  "git" "ninja" "cmake"
  "python-setuptools" "python-psutil" "python-sphinx"
  "python-recommonmark" "mimalloc"
)

makedepends_x86_64=("lib32-gcc-libs")
source=(
  "https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver}/llvm-project-${pkgver}.src.tar.xz"
  "llvm-config.h"
)

options=("staticlibs" "!lto" "!debug")

_skip_build_test=y
_skip_documentation=y
_extra_build_flags=(
  -DLLVM_ENABLE_LTO=Thin
  -DCMAKE_EXE_LINKER_FLAGS=-Wl,--push-state,/usr/lib/libmimalloc.a,--pop-state -DCMAKE_CXX_STANDARD=17
  -DCMAKE_SKIP_RPATH=ON
  -DENABLE_LINKER_BUILD_ID=ON
  )
_build_documentation=0
_build_tests=0
_build_bindings=0

_rpatch() {
  echo -e "\E[1;33m Revert patch: ${1}\E[0m"
  patch --forward --reverse --strip=1 --input="${srcdir:?}/${1}"
}

_patch() {
  echo -e "\E[1;33m Apply patch: ${1}\E[0m"
  patch --forward --strip=1 --input="${srcdir:?}/${1}"
}

prepare() {
  mv "${srcdir:?}/llvm-project-${pkgver}.src" llvm-project || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Prepare Failed! \E[0m"
    exit 1
  )

  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Prepare Failed! \E[0m"
    exit 1
  )

  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    clang-tools-extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py
}

build() {
  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Build Failed! \E[0m"
    exit 1
  )

  _extra_build_flags+=(
    -DCMAKE_C_COMPILER="$CC"
    -DCMAKE_CXX_COMPILER="$CXX"
  )

  export CFLAGS="$CFLAGS -fno-plt -fomit-frame-pointer -fno-semantic-interposition"
  export CXXFLAGS="$CXXFLAGS -fno-plt -fomit-frame-pointer -fno-semantic-interposition"
  export LDFLAGS="$LDFLAGS -Wl,-Bsymbolic-functions"


  if ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    export LD=ld.lld
    export CC_LD=lld
    export CXX_LD=lld
    export HOSTLD=ld.lld
    _extra_build_flags+=(-DLLVM_USE_LINKER=lld)
  fi

  while true; do
    case ${_skip_build_test} in
    [Yy] | "")
      _build_tests=0
      _extra_build_flags+=(-DLLVM_BUILD_TESTS=OFF)
      break
      ;;
    [Nn])
      _build_tests=1
      _extra_build_flags+=(-DLLVM_BUILD_TESTS=ON)
      break
      ;;
    *) echo -e "\E[1;31mPlease answer Y or N! \E[0m" ;;
    esac
  done

  while true; do
    case ${_skip_documentation} in
    [Yy] | "")
      _build_documentation=0
      _extra_build_flags+=(-DLLVM_BUILD_DOCS=OFF)
      break
      ;;
    [Nn])
      _build_documentation=1
      _extra_build_flags+=(
        -DLLVM_BUILD_DOCS=ON
        -DLLVM_ENABLE_SPHINX=ON
        -DLLVM_ENABLE_DOXYGEN=OFF
        -DSPHINX_WARNINGS_AS_ERRORS=OFF
      )
      break
      ;;
    *) echo -e "\E[1;31mPlease answer Y or N! \E[0m" ;;
    esac
  done

  cmake -S llvm -B build -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLLVM_BINUTILS_INCDIR=/usr/include \
    -DLLVM_BUILD_RUNTIME=ON \
    -DLLVM_HOST_TRIPLE="${CHOST:?}" \
    -DLLVM_BUILD_EXTERNAL_COMPILER_RT=ON \
    -DLLVM_BUILD_LLVM_DYLIB=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DCLANG_LINK_CLANG_DYLIB=ON \
    -DLLVM_INSTALL_UTILS=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_FFI=ON \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;lld;lldb;mlir;polly;pstl" \
    -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
    -DCLANG_LINK_CLANG_DYLIB=ON \
    -DLLDB_USE_SYSTEM_SIX=1 \
    -DLIBOMP_INSTALL_ALIASES=OFF \
    -DLLVM_INSTALL_TOOLCHAIN_ONLY=OFF \
    -DPOLLY_ENABLE_GPGPU_CODEGEN=ON \
    -DCLANG_DEFAULT_PIE_ON_LINUX=ON \
    "${_extra_build_flags[@]}"

  ninja -C build

  if [[ _build_documentation -eq 1 && _build_bindings -ne 0 ]]; then
    ninja -C build ocaml_doc
  fi
}

check() {
  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project/build directory! Check Failed! \E[0m"
    exit 1
  )

  if [[ _build_tests -eq 1 ]]; then
    ninja -C build check-llvm
    ninja -C build check-clang
    ninja -C build check-clang-tools
    ninja -C build check-polly
    ninja -C build check-lldb
    ninja -C build check-lld
  fi
}

_python_optimize() {
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package() {
  cd "${srcdir:?}/llvm-project" || (
    echo -e "\E[1;31mCan't cd to ${srcdir}/llvm-project directory! Package Failed! \E[0m"
    exit 1
  )

  if [[ _build_documentation -eq 0 ]]; then
    mkdir -p "${srcdir:?}/llvm-project/build/docs/ocamldoc/html/"
  fi

  DESTDIR="${pkgdir:?}" ninja -C build install

  pushd llvm/utils/lit || (
    echo -e "\E[1;31mpushd utils/lit - Package Failed! \E[0m"
    exit 1
  )

  python setup.py install --root="${pkgdir:?}" -O1
  popd || (
    echo -e "\E[1;31mpopd - Package Failed!  \E[0m"
    exit 1
  )

  if [[ "${CARCH:?}" == "x86_64" ]]; then
    mv "${pkgdir:?}/usr/include/llvm/Config/llvm-config"{,-64}.h
    cp "${srcdir:?}/llvm-config.h" "${pkgdir:?}/usr/include/llvm/Config/llvm-config.h"
  fi

  # Symlink LLVMgold.so from /usr/lib/bfd-plugins
  # https://bugs.archlinux.org/task/28479
  mkdir -p "${pkgdir:?}/usr/lib/bfd-plugins"
  ln -s ../LLVMgold.so "${pkgdir:?}/usr/lib/bfd-plugins/LLVMgold.so"

  # Symlink all files inside x86_64-pc-linux-gnu to /usr/lib/
  pushd ${pkgdir:?}/usr/lib/
  ln -s x86_64-pc-linux-gnu/* .
  popd

  # Clang
  site_packages=$(python -c "import site; print(site.getsitepackages()[0])")
  install -d "${pkgdir:?}/${site_packages}"
  mv "${pkgdir:?}/usr/lib/"{libear,libscanbuild} "${pkgdir:?}/${site_packages}/"
  cp -a clang/bindings/python/clang "${pkgdir:?}/${site_packages}/"

  mv "${pkgdir:?}"/usr/libexec/* "${pkgdir:?}/usr/lib/clang/"
  rm -fr "${pkgdir:?}/usr/libexec"
  sed -i 's|libexec|lib/clang|' \
    "${pkgdir:?}/usr/bin/scan-build" \
    "${pkgdir:?}/${site_packages}/libscanbuild/analyze.py"

  _python_optimize "${pkgdir:?}/usr/share" "${pkgdir:?}/${site_packages}"

  # Remove html documentation
  if [[ _build_documentation -eq 0 ]]; then
    rm -fr "${pkgdir:?}/usr/share/doc"
  fi
}
